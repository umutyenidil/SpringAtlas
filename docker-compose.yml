services:
  maildev:
    image: maildev/maildev
    container_name: atlas_maildev
    restart: unless-stopped
    ports:
      - "1025:1025" # SMTP server
      - "1080:1080" # Web interface
    networks:
      - atlas_network

  postgres:
    container_name: atlas_postgres
    image: postgres:15-alpine
    restart: unless-stopped
    ports:
      - '5432:5432'
    environment:
      POSTGRES_DB: atlas
      POSTGRES_USER: umut
      POSTGRES_PASSWORD: umut
    volumes:
      - atlas_postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U umut -d atlas" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - atlas_network

  mongodb:
    container_name: atlas_mongodb
    image: mongo:latest
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: atlas
      MONGO_INITDB_ROOT_USERNAME: umut
      MONGO_INITDB_ROOT_PASSWORD: umut
    volumes:
      - atlas_mongo:/data/db
    healthcheck:
      test: [ "CMD-SHELL", "mongosh --username umut --password umut --eval 'db.adminCommand(\"ping\")'" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - atlas_network

  redis:
    image: redis:latest
    container_name: atlas_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - atlas_redis:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - atlas_network

  zipkin:
    container_name: atlas_zipkin
    image: openzipkin/zipkin:3.5
    ports:
      - "9411:9411"
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9411/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - atlas_network

  prometheus:
    image: prom/prometheus:latest
    container_name: atlas_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/alert.rules.yml:/etc/prometheus/alert.rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - atlas_network

  grafana:
    image: grafana/grafana:latest
    container_name: atlas_grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - atlas_network

  alertmanager:
    image: prom/alertmanager:latest
    container_name: atlas_alertmanager
    restart: unless-stopped
    volumes:
      - ./docker/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    ports:
      - "9093:9093"
    networks:
      - atlas_network

  config-service:
    container_name: atlas_config
    build:
      context: ./services/config
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8081:8081"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8081/actuator/health" ]
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 5s
    networks:
      - atlas_network

  eureka-service:
    container_name: atlas_eureka
    build:
      context: ./services/eureka
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      SPRING_CONFIG_IMPORT: "optional:configserver:http://config-service:8081"
    depends_on:
      config-service:
        condition: service_healthy
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8761/actuator/health" ]
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 5s
    networks:
      - atlas_network

  auth-service:
    container_name: atlas_auth
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      SPRING_CONFIG_IMPORT: "optional:configserver:http://config-service:8081"
    ports:
      - "8090:8090"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      eureka-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8090/actuator/health" ]
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 5s
    networks:
      - atlas_network

  catalog-service:
    container_name: atlas_catalog
    build:
      context: ./services/catalog
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      SPRING_CONFIG_IMPORT: "optional:configserver:http://config-service:8081"
    ports:
      - "8091:8091"
    depends_on:
      mongodb:
        condition: service_healthy
      eureka-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8091/actuator/health" ]
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 5s
    networks:
      - atlas_network

  payment-service:
    container_name: atlas_payment
    build:
      context: ./services/payment
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      SPRING_CONFIG_IMPORT: "optional:configserver:http://config-service:8081"
    ports:
      - "8092:8092"
    depends_on:
      eureka-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8092/actuator/health" ]
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 5s
    networks:
      - atlas_network

  gateway:
    container_name: atlas_gateway
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      SPRING_CONFIG_IMPORT: "optional:configserver:http://config-service:8081"
    ports:
      - "80:80"
    depends_on:
      auth-service:
        condition: service_healthy
      catalog-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost/actuator/health" ]
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 5s
    networks:
      - atlas_network

networks:
  atlas_network:
    driver: bridge

# Volumes
volumes:
  atlas_postgres:
    driver: local
  atlas_mongo:
    driver: local
  atlas_redis:
    driver: local